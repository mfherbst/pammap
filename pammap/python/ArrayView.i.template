// vi: syntax=c
//
// Copyright (C) 2018 by Michael F. Herbst and contributors
//
// This file is part of pammap.
//
// pammap is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// pammap is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with pammap. If not, see <http://www.gnu.org/licenses/>.
//

%{
#include "ArrayView.hpp"
#include "typedefs.hxx"
%}

%include "numpy.i"

/*
 *  ArrayView typemaps
 */
%define %arrayview_typemaps(DATA_TYPE, DATA_TYPECODE)
%typecheck(SWIG_TYPECHECK_DOUBLE_ARRAY,fragment="NumPy_Macros")
  (DATA_TYPE ARRAYVIEW)
{
  $1 = is_array($input) && PyArray_EquivTypenums(array_type($input),
                                                 DATA_TYPECODE);
}

/** Typemap to pass a view to a numpy array to C++
  */
%typemap(in,fragment="NumPy_Fragments")
  (DATA_TYPE ARRAYVIEW)
  (PyArrayObject* array=NULL)
{
  array = obj_to_array_no_conversion($input, DATA_TYPECODE);
  if (!array || !require_c_or_f_contiguous(array)
      || !require_native(array)) SWIG_fail;

  std::vector<size_t> shape(array_numdims(array));
  std::vector<size_t> strides(array_numdims(array));
  for (int i=0; i < array_numdims(array); ++i) {
    shape[i] = array_size(array, i);
    strides[i] = array_stride(array, i);
  }

  $1 = DATA_TYPE(
    static_cast<typename DATA_TYPE::value_type*>(array_data(array)),
    shape, strides);
  $1.owner = static_cast<void*>(array);
  $1.owner_type = pammap::ArrayViewBase::NUMPY;
}

%typemap(out,fragment="NumPy_Fragments")
  (DATA_TYPE)
  (PyArrayObject* array = NULL)
{
  // Need to be build from numpy
  if (!$1.owner || $1.owner_type != pammap::ArrayViewBase::NUMPY) {
    SWIG_fail;
  }
  PyObject* obj = static_cast<PyObject*>($1.owner);
  array = obj_to_array_no_conversion(obj, DATA_TYPECODE);

  // Need to be a proper numpy array
  if (!array || !require_native(array)) SWIG_fail;

  // Shape and strides need to agree
  for (int i=0; i < array_numdims(array); ++i) {
    if ($1.shape[i] != array_size(array, i) ||
        $1.strides[i] != array_size(array, i)) {
      SWIG_fail;
    }
  }

  // All fine, append as output
  $result = SWIG_Python_AppendOutput($result,(PyObject*)array);
}
%enddef

//
// Do not use the bare *.i.template file, use the generated ArrayView.i
// files instead.
// In the full version the instantiation typemaps will be added here.
//
