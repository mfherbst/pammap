//
// Copyright (C) 2018 by Michael F. Herbst and contributors
//
// This file is part of pammap.
//
// pammap is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// pammap is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with pammap. If not, see <http://www.gnu.org/licenses/>.
//

//
// Do not edit. This file has been automatically generated by the script
// generate_dtype_code.py
// Instead edit the script and rerun it.
//
#pragma once
#ifdef SWIG
#include "typedefs.hxx"
%apply (pammap::DataBlock<pammap::Complex> DATAVIEW) {(pammap::DataBlock<pammap::Complex>)}
%apply (pammap::DataBlock<pammap::Integer> DATAVIEW) {(pammap::DataBlock<pammap::Integer>)}
%apply (pammap::DataBlock<pammap::Float> DATAVIEW) {(pammap::DataBlock<pammap::Float>)}
#else
#include "PamMap.hpp"
#endif

namespace pammap {

struct PamMapInterface : public PamMap {
void update_complex(std::string key, Complex value) {
  this->update(key, std::move(value));
}

Complex get_complex(std::string key) {
  return this->at<Complex>(key);
}

void update_integer(std::string key, Integer value) {
  this->update(key, std::move(value));
}

Integer get_integer(std::string key) {
  return this->at<Integer>(key);
}

void update_float(std::string key, Float value) {
  this->update(key, std::move(value));
}

Float get_float(std::string key) {
  return this->at<Float>(key);
}

void update_string(std::string key, String value) {
  this->update(key, std::move(value));
}

String get_string(std::string key) {
  return this->at<String>(key);
}

void update_datablock_complex(std::string key, pammap::DataBlock<pammap::Complex> value) {
  this->update(key, std::move(value));
}
pammap::DataBlock<pammap::Complex> get_datablock_complex(std::string key) {
  return this->at<DataBlock<Complex>>(key);}
void update_datablock_integer(std::string key, pammap::DataBlock<pammap::Integer> value) {
  this->update(key, std::move(value));
}
pammap::DataBlock<pammap::Integer> get_datablock_integer(std::string key) {
  return this->at<DataBlock<Integer>>(key);}
void update_datablock_float(std::string key, pammap::DataBlock<pammap::Float> value) {
  this->update(key, std::move(value));
}
pammap::DataBlock<pammap::Float> get_datablock_float(std::string key) {
  return this->at<DataBlock<Float>>(key);}
};

} // namespace pammap
