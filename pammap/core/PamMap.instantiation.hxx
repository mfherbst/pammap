//
// Copyright (C) 2018 by Michael F. Herbst and contributors
//
// This file is part of pammap.
//
// pammap is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// pammap is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with pammap. If not, see <http://www.gnu.org/licenses/>.
//

//
// Do not edit. This file has been automatically generated by the script
// PamMap.instantiation.hxx.generate.py
// Instead edit the script and rerun it.
//
#include "typedefs.hxx"

namespace pammap {

template const Integer& PamMap::at<Integer>(const std::string& key, const Integer& default_value) const;
template Integer& PamMap::at<Integer>(const std::string& key, Integer& default_value);
template const Float& PamMap::at<Float>(const std::string& key, const Float& default_value) const;
template Float& PamMap::at<Float>(const std::string& key, Float& default_value);
template const Complex& PamMap::at<Complex>(const std::string& key, const Complex& default_value) const;
template Complex& PamMap::at<Complex>(const std::string& key, Complex& default_value);
template const String& PamMap::at<String>(const std::string& key, const String& default_value) const;
template String& PamMap::at<String>(const std::string& key, String& default_value);
template const Bool& PamMap::at<Bool>(const std::string& key, const Bool& default_value) const;
template Bool& PamMap::at<Bool>(const std::string& key, Bool& default_value);
template const ArrayView<Integer>& PamMap::at<ArrayView<Integer>>(const std::string& key, const ArrayView<Integer>& default_value) const;
template ArrayView<Integer>& PamMap::at<ArrayView<Integer>>(const std::string& key, ArrayView<Integer>& default_value);
template const ArrayView<Float>& PamMap::at<ArrayView<Float>>(const std::string& key, const ArrayView<Float>& default_value) const;
template ArrayView<Float>& PamMap::at<ArrayView<Float>>(const std::string& key, ArrayView<Float>& default_value);
template const ArrayView<Complex>& PamMap::at<ArrayView<Complex>>(const std::string& key, const ArrayView<Complex>& default_value) const;
template ArrayView<Complex>& PamMap::at<ArrayView<Complex>>(const std::string& key, ArrayView<Complex>& default_value);
template const ArrayView<String>& PamMap::at<ArrayView<String>>(const std::string& key, const ArrayView<String>& default_value) const;
template ArrayView<String>& PamMap::at<ArrayView<String>>(const std::string& key, ArrayView<String>& default_value);
template const ArrayView<Bool>& PamMap::at<ArrayView<Bool>>(const std::string& key, const ArrayView<Bool>& default_value) const;
template ArrayView<Bool>& PamMap::at<ArrayView<Bool>>(const std::string& key, ArrayView<Bool>& default_value);

} // namespace pammap
