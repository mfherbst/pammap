//
// Copyright (C) 2018 by Michael F. Herbst and contributors
//
// This file is part of pammap.
//
// pammap is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// pammap is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with pammap. If not, see <http://www.gnu.org/licenses/>.
//

//
// Do not edit. This file has been automatically generated by the script
// IsSupportedType.hxx.generate.py
// Instead edit the script and rerun it.
//
#include <type_traits>
#include "typedefs.hxx"

namespace pammap {

/** Is the type T supported by pammap for storage. */
template<typename T>
struct IsSupportedType : public std::false_type {};

/** Specialisation of IsSupportedType<T> for Integer.*/
template<>
struct IsSupportedType<Integer> : public std::true_type {};

/** Specialisation of IsSupportedType<T> for Float.*/
template<>
struct IsSupportedType<Float> : public std::true_type {};

/** Specialisation of IsSupportedType<T> for Complex.*/
template<>
struct IsSupportedType<Complex> : public std::true_type {};

/** Specialisation of IsSupportedType<T> for String.*/
template<>
struct IsSupportedType<String> : public std::true_type {};

/** Specialisation of IsSupportedType<T> for Bool.*/
template<>
struct IsSupportedType<Bool> : public std::true_type {};

/** Specialisation of IsSupportedType<T> for ArrayView<Integer>.*/
template<>
struct IsSupportedType<ArrayView<Integer>> : public std::true_type {};

/** Specialisation of IsSupportedType<T> for ArrayView<Float>.*/
template<>
struct IsSupportedType<ArrayView<Float>> : public std::true_type {};

/** Specialisation of IsSupportedType<T> for ArrayView<Complex>.*/
template<>
struct IsSupportedType<ArrayView<Complex>> : public std::true_type {};

/** Specialisation of IsSupportedType<T> for ArrayView<String>.*/
template<>
struct IsSupportedType<ArrayView<String>> : public std::true_type {};

/** Specialisation of IsSupportedType<T> for ArrayView<Bool>.*/
template<>
struct IsSupportedType<ArrayView<Bool>> : public std::true_type {};


} // namespace pammap
